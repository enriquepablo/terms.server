
birth is now.

a task is a content:context.

task-wf is a workflow.

task-open is a status.
task-closed is a status.

task-action is wf-action.

open-task is task-action.
close-task is task-action.

open-task-tr is a transition.
(has-transition task-wf, which open-task-tr).
(executed open-task-tr, by open-task, from task-closed, to task-open).

close-task-tr is a transition.
(has-transition task-wf, which close-task-tr).
(executed close-task-tr, by close-task, from task-open, to task-closed).

(is-protected open-task, by edit-perm, for task-closed).
(is-protected close-task, by edit-perm, for task-open).

(is-protected edit, by edit-perm, for task-closed).
(is-protected edit, by edit-perm, for task-open).
(is-protected view, by edit-perm, for task-closed).
(is-protected view, by basic-perm, for task-open).

a project is a task.

a job is a task.

is-working is unique, subj a person, on a task.

is-owned is unique, subj a content, by a person.

(is-owned Task1, by Person1)
->
(has-role Person1, which manager, where Task1).

gives is totell, subj a person, to a person, what a content.

(is-owned Content1, by Person1);
(gives Person1, what Content1, to Person2)
->
(is-owned Content1, by Person2).

put-in-context is now, subj a person, what a content, where a context.

(wants Person1, do (put-in-context Person1, what Content1, where Context1));
(has-role Person1, which Role1, where Context1);
(has-permission Role1, which edit-perm);
(is-owned Content1, by Person1)
->
(located Content1, where Context1).



has-votes is unique, subj a content, many a number.

votes is content-action, for a number.

(is-protected votes, by manage-perm, for task-closed).
(is-protected votes, by edit-perm, for task-open).

(votes Person1, what Content1, for V1);
(has-votes Content1, many V2)
<-
condition &= V1 < 10

condition &= count('(votes Person1, what Content1)') == 0

V3 = V2 + V1
->
(has-votes Content1, many V2).





(birth Content1)
->
(has-status Content1, which private).
