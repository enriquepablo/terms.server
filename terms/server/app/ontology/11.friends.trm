
knows is onwards, subj a person, who a person.

likes is onwards, subj a person, what a thing.

tell is abs-person-action, who a person, what a exists.

(wants Person1, do (tell Person1, who Person2, what Exists1));
(knows Person2, who Person1)
->
(tell Person1, who Person2, what Exists1).

a group is a person:context.

belongs is onwards, subj a person, to a group.

(belongs Person1, to Group1)
->
(knows Group1, who Person1);
(has-role Person1, which manager, where Group1).

(tell Person1, who Group1, what Exists1);
(belongs Person2, to Group1)
->
(tell Person1, who Person2, what Exists1).

person-has-votes is unique, subj a person, in a group, for a number.

votes-person is abs-person-action, who a person, in a group.

has-voted-person is onwards, subj a person, who a person, in a group.

(wants Person1, do (votes-person Person1, who Person2, in Group1));
(belongs Person1, to Group1)
->
(votes-person Person1, who Person2, in Group1).

(votes-person Person1, who Person2, in Group1);
(person-has-votes Person2, in Group1, for N1)
<-
condition &= runtime.count('(has-voted-person %(Person1)s, who %(Person2)s, in %(Group1)s)' % match) == 0

N2 = N1 + 1
->
(has-voted-person Person1, who Person2, in Group1);
(person-has-votes Person2, in Group1, for N2).

group-has-threshold is unique, subj a group, for a number.

become-member is abs-person-action, of a group.

(wants Person1, do (become-member Person1, of Group1))
->
(person-has-votes Person1, in Group1, for 0).

(wants Person1, do (become-member Person1, of Group1));
(person-has-votes Person1, in Group1, for N1);
(group-has-threshold Group1, for N2)
<-
condition &= N1 >= N2
->
(belongs Person1, to Group1).

(initialize Person1, obj Person2)
->
(knows Person1, who Person2);
(knows Person2, who Person1).

(initialize Person1, obj Group1)
->
(belongs Person1, to Group1);
(group-has-threshold Group1, for 1).
