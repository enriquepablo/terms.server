# Copyright (c) 2007-2012 by Enrique PÃ©rez Arnaud <enriquepablo@gmail.com>
#
# This file is part of the terms project.
# https://github.com/enriquepablo/terms
#
# The terms project is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# The terms project is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with any part of the terms project.
# If not, see <http://www.gnu.org/licenses/>.
<https://raw.github.com/enriquepablo/terms.server/master/terms/server/app/ontology/people.trm>
{{{
"author": "enrique perez arnaud"
}}}

import <https://raw.github.com/enriquepablo/terms.server/master/terms/server/app/ontology/context.trm>.

a group is a thing.

a person is a context:group.

admin is a person.

to belong is to endure, subj a person, where a group.

# a primitive abstract verb that has a person subj,
# and is told back when used in a new sentence
to abs-person-action is to happen, subj a group.

# XXX new necessary syntax
# Abs-person-action1:(Abs-person-actionVerb1 Group1);
# (belong Group2, where Group1)
# ->
# (Abs-person-actionVerb1 Group2, ...Abs-person-action1).

to want is to happen, subj a person, do a abs-person-action.

to should is to endure, subj a person, do a abs-person-action.

to abs-person-relation is to endure, subj a person, what a thing.

to know is to abs-person-relation, what a person.

to like is to know.

to establish-relation is to abs-person-action, which a verb, with a person.

(want Person1, do (establish-relation Person1, which Abs-person-relationVerb1, with Person2))
->
(Abs-person-relationVerb1 Person1, what Person2).

# XXX this fails with sqlalchemy.orm.exc.FlushError: Attempting to flush an item of type <class 'terms.core.terms.Term'> as a member of collection "Premise.pred". Expected an object of type <class 'terms.core.terms.Predicate'> or a polymorphic subclass of this type.
#(should Person1, do Abs-person-action1);
#(Abs-person-action1)
#->
#(finish Person1, what (should Person1, do Abs-person-action1)).

to tell is to abs-person-action, who a person, what a exist.

(want Person1, do Tell1:(tell Person1, who Person2));
(KnowVerb1 Person2, what Person1)
->
(Tell1).

to view-profile is to abs-person-action, of a person.
to edit-profile is to abs-person-action, of a person.
to save-profile is to abs-person-action, of a person.

(want Person1, do (view-profile Person1, of Person2));
(KnowVerb1 Person2, what Person1)
->
(view-profile Person1, of Person2).


(want Person1, do (edit-profile Person1, of Person1))
->
(edit-profile Person1, of Person1).


(want Person1, do (save-profile Person1, of Person1))
->
(save-profile Person1, of Person1).


(want admin, do Edit-profile1:(edit-profile admin, of Person2))
->
(Edit-profile1).


(want admin, do Save-profile1:(save-profile admin, of Person2))
->
(Save-profile1).


to initialize is to abs-person-action, obj a thing.

(want Person1, do (initialize Person1, obj Thing1))
<-
condition &= runtime.count('(initialize Person2, obj %(Thing1)s, at_ T1)' % match) == 0
condition &= runtime.count('(initialize Person2, obj %(Thing1)s)' % match) == 0
->
(initialize Person1, obj Thing1).


(initialize Person1, obj Group1)
->
(belong Person1, where Group1).

(initialize Person1, obj Person2)
->
(belong Person2, where Person2);
(like Person2, what Person2);
(know Person1, what Person2);
(know Person2, what Person1).

(initialize admin, obj admin).
