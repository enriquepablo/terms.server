# Copyright (c) 2007-2012 by Enrique PÃ©rez Arnaud <enriquepablo@gmail.com>
#
# This file is part of the terms project.
# https://github.com/enriquepablo/terms
#
# The terms project is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# The terms project is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with any part of the terms project.
# If not, see <http://www.gnu.org/licenses/>.
<https://raw.github.com/enriquepablo/terms.server/master/terms/server/app/ontology/workflow.trm>
{{{
"author": "enrique perez arnaud"
}}}

import <https://raw.github.com/enriquepablo/terms.server/master/terms/server/app/ontology/content.trm>.

a workflow is a thing.

is-assigned is onwards, subj a workflow, to a noun, in a context.

a role is a thing.
has-role is onwards, subj a group, which a role, where a context.

a permission is a thing.
has-permission is onwards, subj a role, which a permission.

manager is a role.
manage-perm is a permission.
(has-permission manager, which manage-perm).

(has-role admin, which manager, where global).

a status is a thing.
has-status is unique, subj a content, which a status.

is-protected is onwards, subj a verb, by a permission, for a status.

(wants Person1, do (Abs-content-actionVerb1 Person1, what Content1));
(is-protected Abs-content-actionVerb2, by Permission1, for Status1);
(belongs Person1, to Group1);
(has-role Group1, which Role1, where Context1);
(has-permission Role1, which Permission1);
(has-status Content1, which Status1);
(located Content1, in Context1);
a Abs-content-actionVerb1 is a Abs-content-actionVerb2
->
(Abs-content-actionVerb1 Person1, what Content1).

a transition is a thing.

has-transition is onwards, subj a workflow, which a transition.

abs-wf-action is abs-content-action.

executed is onwards, subj a transition, by a verb, from a status, to a status.

(Abs-wf-actionVerb1 Person1, what Content1);
(is-assigned Workflow1, to ContentNoun1, in Context1);
(has-transition Workflow1, which Transition1);
(executed Transition1, by Abs-wf-actionVerb1, from Status1, to Status2);
(has-status Content1, which Status1);
(located Content1, in Context1);
Content1 is a ContentNoun1
->
(has-status Content1, which Status2).

(initialize Person1, obj Context1)
->
(has-role Person1, which manager, where Context1).


grant-role is abs-person-action, which a role, to a person, in a context.

(wants Person1, do (grant-role Person1, which Role1, in Context1, to Person2));
(has-role Person1, which Role2, where Context1);
(has-permission Role2, which manage-perm)
->
(has-role Person2, which Role1, where Context1).
