# Copyright (c) 2007-2012 by Enrique PÃ©rez Arnaud <enriquepablo@gmail.com>
#
# This file is part of the terms project.
# https://github.com/enriquepablo/terms
#
# The terms project is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# The terms project is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with any part of the terms project.
# If not, see <http://www.gnu.org/licenses/>.
<https://raw.github.com/enriquepablo/terms.server/master/terms/server/app/ontology/communities.trm>
{{{
"author": "enrique perez arnaud"
}}}

import <https://raw.github.com/enriquepablo/terms.server/master/terms/server/app/ontology/owning.trm>.


a community is a context:group:content.

(belongs Person1, where Community1)
->
(has-role Person1, which editor, where Community1).

a poll is a content.

to has-poll is to endure, subj a community, which a poll.

to has-threshold is to exclusive-endure, subj a poll, of a number.
to poll-has-votes is to exclusive-endure, subj a poll, many a number.

to votes-poll is to abs-content-action, what a poll, for a number.
to has-voted-poll is to endure, subj a person, what a poll.

(is-protected votes-poll, by manage-perm, for private).
(is-protected votes-poll, by edit-perm, for public).

(votes-poll Person1, what Poll1, for V1);
(poll-has-votes Poll1, many V2)
<-
condition &= V1 < 10

condition &= runtime.count('(has-voted-poll %(Person1)s, what %(Poll1)s)' % match) == 0

V3 = V2 + V1
->
(has-voted-poll Person1, what Poll1);
(poll-has-votes Poll1, many V3).

(wants Person1, do Votes-poll1:(votes-poll Person1, for N1, what Poll1));
(votes-poll Person1, what Poll1)
->
(Votes-poll1).

to has-consecuence is to endure, subj a poll, which a exist.

(has-consecuence Poll1, which Exist1);
(has-threshold Poll1, of N1);
(poll-has-votes Poll1, many N2)
<-
condition &= N1 < N2
->
(has-status Poll1, which private);
(Exist1).

a membership-application is a poll.

(wants Person1, do (put-in-context Person1, what Membership-application1, in Community1))
->
(located Membership-application1, in Community1);
(has-consecuence Membership-application1, which (belongs Person1, where Community1)).

(initialize Person1, obj Poll1)
->
(poll-has-votes Poll1, many 0);
(has-threshold Poll1, of 1).

(initialize Person1, obj Community1)
->
(belongs Person1, where Community1);
(has-role Person1, which manager, where Community1).
