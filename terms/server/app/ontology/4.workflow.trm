a workflow is a thing.

is-assigned is onwards, subj a workflow, to a noun, in a context.

a role is a thing.
has-role is abs-has-in-context, subj a person, which a role, where a context.

a permission is a thing.
has-permission is onwards, subj a role, which a permission.

manager is a role.
manage-perm is a permission.
(has-permission manager, which manage-perm).

a status is a thing.
has-status is unique, subj a content, which a status.

is-protected is onwards, subj a abs-person-action, by a permission, for a status.

(wants Person1, do (Abs-content-actionVerb1 Person1, what Content1));
(is-protected Abs-content-actionVerb2, by Permission1, for Status1);
(has-role Person1, which Role1, where Context1);
(has-permission Role1, which Permission1);
(has-status Content1, which Status1);
(located Content1, in Context1);
a Abs-content-actionVerb1 is a Abs-content-actionVerb2
->
(Abs-content-actionVerb1 Person1, what Content1).

a transition is a thing.

has-transition is onwards, subj a workflow, which a transition.

abs-wf-action is abs-content-action.

executed is onwards, subj a transition, by a verb, from a status, to a status.

(Abs-wf-actionVerb1 Person1, what Content1);
(is-assigned Workflow1, to ContentNoun1, in Context1);
(has-transition Workflow1, which Transition1);
(executed Transition1, by Abs-wf-actionVerb1, from Status1, to Status2);
(has-status Content1, which Status1);
(located Content1, in Context1);
Content1 is a ContentNoun1
->
(has-status Content1, which Status2).

(initialize Person1, obj Context1)
->
(has-role Person1, which manager, where Context1).


grant-role is abs-person-action, which a role, to a person, in a context.

(wants Person1, do (grant-role Person1, which Role1, where Context1, to Person2));
(has-role Person1, which Role2, where Context1);
(has-permission Role2, which manage-perm)
->
(has-role Person2, which Role1, where Context1).
